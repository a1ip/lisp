#lang pollen

◊section[#:label "lisp1-2-omega/sect:extensions"]{Другие возможности}

Как только мы начали по-особенному обращаться с~функциями, на ум сразу~же приходят другие возможные вариации.
Например, мы могли~бы трактовать числа как функции-аксессоры для списков:

◊code:lisp{
 (2 '(foo bar hux wok)) ◊(is) hux
(-2 '(foo bar hux wok)) ◊(is) (hux wok)
}

Положительное число~◊${n} считается синонимом для~◊ic{cad◊sup{◊${n}}r},
тогда как отрицательные числа означают ◊ic{cd◊sup{◊${-n}}r}.
Базовым аксессорам ◊ic{car} и ◊ic{cdr} соответствуют числа ◊ic{0} и~◊ic{-1}.
После этого элементарно реализуются чисто алгебраические преобразования:
◊ic{(-1~(-2~◊${\pi}))} превращается в~◊ic{(-3~◊${\pi})},
а~выражение ◊ic{(2~(-3~◊${\pi}))} эквивалентно~◊ic{(5~◊${\pi})}.

Также можно придать смысл спискам функций на месте функции:

◊code:lisp{
((list + - *) 5 3) ◊(is) (8 2 15)
}

Применение списка функций возвращает список из результатов применения каждого элемента-функции к~соответствующим аргументам.
Фактически, предыдущий пример — это краткая запись для

◊code:lisp{
(map (lambda (f) (f 5 3))
     (list + - *) )
}

Наконец, мы могли~бы разрешить функциям быть вторым элементом аппликаций,
эмулируя привычную инфиксную запись: выражение~◊ic{(1~+~2)} вернёт~◊ic{3}.
Такое поведение реализовано, например, в~DWIM из~◊cite{tei74,tei76}.

Подобные инновации опасны.
Во-первых, так уменьшается количество ошибочных форм в~языке,
а~следовательно, затруднется поиск ошибок, которые иначе были~бы очевидны.
Во-вторых, принципиальная выразительность языка не~меняется,
программы остаются настолько~же сложными, просто на несколько байтов короче,
а~новый синтаксис становится редко используемой игрушкой.
Наконец, такие возможности вмешиваются в~естественный порядок вещей
и нарушают связь между функциями и функциональными объектами, которые можно применять как функции. 
Списки или числа становятся вызываемыми, не~являясь при этом функциями.
Их~можно, например, складывать — но таков~ли смысл сложения для функций?

◊code:lisp{
(apply (list 2 (list 0 (+ 1 2)))
       '(foo bar hux wok) )
   ◊(is) (hux (foo wok))
}

Поэтому не~рекомендуется реализовывать такие инновации как часть базового языка.
◊seeEx{lisp1-2-omega/ex:innovations}
