#lang pollen

◊section[#:label "assignment/sect:side-effects"]{Побочные эффекты}

◊indexR{вычисления!контекст}
◊indexR{контекст вычислений}
◊indexR{побочные эффекты}
◊indexR{память}
До~сих~пор мы представляли вычисления упорядоченной тройкой выражения, окружения и~продолжения.
Как~бы стройно она ни~выглядела, такое представление не~объясняет присваивание, ввод-вывод, и~многое~другое.
Подобные изменения состояния мира объединяются в~понятие ◊term{побочных эффектов}
и~для компьютера в~конечном итоге сводятся к~определённым изменениям в~его памяти.

Рассмотрим несколько знакомых примеров.
Когда мы читаем что-то из файла, то~где-то изменяется положение метки, которая указывает на~последний считанный~байт.
(Побочный эффект, получаемый вдобавок к~считанным данным!)
Функция ◊ic{display} вызывает временные изменения в~физических свойствах компьютерного дисплея;
не~говоря уже о~необратимых долговременных изменениях, которые выполняет принтер,
и~влиянии увиденного на~мозг пользователя программы.
Как видим, побочные эффекты являются неотъемлемой частью функционирования компьютеров.
Машинные инструкции изменяют состояние регистров.
Без~побочных эффектов невозможно сохранять информацию,
иначе все~программы пришлось~бы постоянно перепечатывать.
Нет,~конечно, можно представить себе идеальный мир,
где~сферические компьютеры работают в~вакууме без~побочных эффектов,
но~кому нужен компьютер-аутист, которому ни~объяснить, что~от него требуется, ни~услышать от~него ответ.
К~счастью, настоящие компьютеры работают совсем не~так.

◊indexR{присваивание!и побочные эффекты}
◊indexR{побочные эффекты!и присваивание}
Как~мы~уже видели, присваивания переменным можно реализовать с~помощью коробок.
А~возможно~ли реализовать точечные~пары, не~используя точечные~пары?
Оказывается, что~да, но~для этого потребуется присваивание!
Точечную пару можно представить в~виде замыкания, которое реагирует на~сообщения
◊footnote{Будем писать имена функций через~◊ic{k}, чтобы~не~путать их с~примитивами.}
◊ic{car}, ◊ic{cdr}, ◊ic{set-car!} и~◊ic{set-cdr!}:

◊indexC{kons}
◊indexC{kar}
◊indexC{kdr}
◊code:lisp{
(define (kons a d)
  (lambda (msg)
    (case msg
      ((car) a)
      ((cdr) d)
      ((set-car!) (lambda (new) (set! a new)))
      ((set-cdr!) (lambda (new) (set! d new))) ) ) )

(define (kar pair)
  (pair 'car) )

(define (set-kdr! pair value)
  ((pair 'set-cdr!) value) )
}


◊indexE{Scheme!проблемы типизации}
Такое определение оказывается не~вполне~точным,◊seeCite{fel90}
ведь теперь точечные пары невозможно отличить от~замыканий.
Как~бы вы, скажем, написали предикат~◊ic{pair?}
Если не~обращать внимания на эту проблему (которая, в~общем-то, всегда возникает вместе возможностью определять новые типы~данных),
то~чётко видно, что присваивание и побочные эффекты тесно связаны и легко выражаются друг через друга.
Поэтому мы вынуждены либо запретить их использование в~принципе,
либо~же принять такими, какими они есть, и~научиться контролировать возможные последствия.
Какую именно форму использовать — присваивание переменным или побочные эффекты — зависит от~контекста и желаемых~свойств.
