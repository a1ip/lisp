#lang pollen

◊section*[#:label "assignment/sect:exercises"]{Упражнения}


◊exercise{assignment/ex:pure-min-max}

Определите чистую функцию~◊ic{min-max} (без~побочных~эффектов).


◊exercise{assignment/ex:lambda-cons}

◊indexR{чисто функциональные структуры данных}
◊indexR{точечные пары!чисто функциональные}
Точечные~пары, которые мы реализовали с~помощью замыканий, реагируют на~символы в~качестве сообщений.
Реализуйте неизменяемые точечные пары — то~есть без функций ◊ic{set-car!} и~◊ic{set-cdr!} —
используя исключительно ◊ic{lambda}-формы.


◊exercise{assignment/ex:destructive-eq}

Определите ◊ic{eq?} для сравнения точечных пар с~помощью ◊ic{set-car!} или~◊ic{set-cdr!}.


◊exercise{assignment/ex:form-or}

◊indexR{поиск с возвратом}
◊indexC{or}
Определите новую специальную форму ◊nobr{◊ic{(or ◊${\alpha} ◊${\beta})}},
которая возвращает значение~◊${\alpha}, если оно приводится к~истине —
в~противном случае форма~◊ic{or} откатывает все побочные эффекты вычисления~◊${\alpha} и~возвращает значение~◊${\beta}.


◊exercise{assignment/ex:previous-value}

Текущая реализация присваивания возвращает только что присвоенное значение.
Перепишите ◊ic{set!} так, чтобы она возвращала предыдущее значение переменной.


◊exercise{assignment/ex:apply/cc}

Определите функции ◊ic{apply} и ◊ic{call/cc} для интерпретатора из этой~главы.


◊exercise{assignment/ex:dotted}

Добавьте в~интерпретатор поддержку функций переменной арности (с~точечным~аргументом).
