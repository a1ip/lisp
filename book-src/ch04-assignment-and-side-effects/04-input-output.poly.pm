#lang pollen

◊section[#:label "assignment/sect:io-and-memory"]{Ввод-вывод и~память}

◊indexR{потоки ввода-вывода}
Теперь поговорим о~вводе-выводе.
Если ограничиться одним потоком ввода и одним потоком вывода
(то~есть функциями ◊ic{display} и~◊ic{read}),
то~достаточно передать каждой функции интерпретатора два дополнительных аргумента.
Поток ввода содержит всё, что программа может из~него прочитать,
а~поток вывода принимает всё, что она туда напишет.
Можно даже предположить, что эти потоки являются единственным средством связи программы с~внешним миром.

Поток вывода легко представляется списком пар ◊nobr{(◊ii{память}, ◊ii{значение})},
которые передаются функции ◊ic{transcode-back} как~есть.
А~вот как представить поток~ввода?
Хитрость здесь в~том, что мы можем вводить и точечные пары со~списками,
а~они не~могут существовать отдельно от~памяти.
Очевидно, при чтении точечных пар необходимо сохранять в~памяти их компоненты.
Переводчиком будет служить функция ◊ic{transcode},
которая принимает значение языка реализации (обозначим~его~◊ic{c}), а~также память и~продолжение.
◊ic{transcode} переводит значение~◊ic{c} в~представление интерпретируемого языка
и передаёт его продолжению~◊ic{k} вместе с~новым состоянием памяти~◊ic{ss}.

◊indexC{transcode}
◊code:lisp{
(define (transcode c s k)
  (cond
    ((null? c)    (k the-empty-list s))
    ((boolean? c) (k (create-boolean c) s))
    ((symbol? c)  (k (create-symbol c) s))
    ((number? c)  (k (create-number c) s))
    ((pair? c)
     (transcode (car c)
                s
                (lambda (a ss)
                  (transcode (cdr c)
                             ss
                             (lambda (d sss)
                               (allocate-pair a d sss k) ) ) ) ) )
    (else (wrong "Not supported" c)) ) )
}

На~этом мы остановимся, так как дальнейшая реализация чересчур монотонна, чтобы приводить её здесь полностью.
Помимо примитивов ◊ic{read} и~◊ic{display},
необходимо в~каждой функции, которую мы написали до~этого,
расширить набор аргументов ◊ic{e},~◊ic{r},~◊ic{s},~◊ic{k} ещё~двумя: ◊ic{i}~и~◊ic{o},
передавая потоки ввода-вывода между функциями подобно~памяти.
