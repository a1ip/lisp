#lang pollen

◊subsection*{Изменение окружений}

Функция~◊ic{update!} изменяет окружение,
так что, скорее всего, тоже может обнаружить похожую ошибку в~программе:
нельзя изменить значение неизвестной переменной.
Мы~обсудим, следует~ли ей так поступать, когда будем говорить о~глобальном окружении.

◊indexC{update!}
◊code:lisp[#:chunk "update!"]{
(define (update! id env value)
  (if (pair? env)
      (if (eq? (caar env) id)
          (begin (set-cdr! (car env) value)
                 value)
          (update! id (cdr env) value) )
      (wrong "No such binding" id) ) )
}

◊indexC{set!!возвращаемое значение}
◊indexR{присваивание!возвращаемое значение}
◊indexR{возвращаемые значения!присваивания}
◊indexC{UFO@#<UFO>}
◊phantomlabel{basics/s:env/ufo}
Возвращаемое значение функции~◊ic{update!} выбрано с~учётом того, что это значение станет значением всего выражения присваивания.
В~Scheme возвращаемое значение формы присваивания не~определено.
Строго говоря, программам не~следует полагаться на какое-либо значение,
но, тем не~менее, мы вынуждены выбрать какое-нибудь значение.
Например:

◊enumerate[#:type "a"]{
  ◊item{
    только что присвоенное значение (так сделано сейчас);
  }
  ◊item{
    предыдущее значение переменной
    (могут быть проблемы с~инициализацией, первым присваиванием);
  }
  ◊item{
    объект «неопределённое значение», некий ◊ic{#<UFO>},
    используемый исключительно как индикатор неопределённого значения;
  }
  ◊item{
    значение формы с~неопределённым значением, вроде ◊ic{set-cdr!} в~Scheme.
  }
}
