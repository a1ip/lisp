#lang pollen

◊section[#:label "basics/sect:basic-evaluator"]{Базовый вычислитель}

◊indexR{переменные!свободные}
◊indexR{переменные!связанные}
◊indexR{свободные переменные}
◊indexR{связывающие формы}
◊indexR{форма!связывающая}
◊indexR{окружение}
◊indexC{evaluate}
Будем различать в~программе ◊term{свободные} и ◊term{связанные переменные}.
Переменная свободна, если ни~одна связывающая форма (вроде ◊ic{let} или~◊ic{lambda}) не~связывает её с~каким-либо определённым значением.
В~противном случае переменная считается связанной.
Свободные переменные могут принимать любые значения внутри функции, определяемые контекстом её~использования.
Структура данных, которая связывает переменные с~их значениями, называется ◊term{окружением}~(◊nobr{environment}).
Таким образом, функция ◊ic{evaluate}
◊footnote{Как вы знаете, «родная» функция-вычислитель Scheme называется ◊ic{eval}.
Чтобы избежать путаницы, нашу функцию мы назовём ◊ic{evaluate}.
По тем~же причинам местный аналог ◊ic{apply} будет называться ◊ic{invoke}.
Меньше перекрытий имён — меньше~проблем.}
принимает два аргумента: программу и окружение, в~котором её следует исполнить:

◊code:lisp{
(define (evaluate exp env) ... )
}
