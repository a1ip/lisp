#lang pollen

◊subsection[#:label "basics/evaluating-forms/ssect:quoting"]{Цитирование}

◊indexC{quote}
◊indexE{M-выражения}
◊indexE{S-выражения}
◊indexR{программы!как данные}
◊indexR{значения!как программы}
◊indexR{цитаты}
Специальная форма ◊ic{quote} позволяет записывать значения,
которые без цитирования интерпретируются как выражения.
Такой механизм необходим, если программы являются полноценным типом данных в~языке —
надо~же как-то различать, где записана программа как программа,
а~где данные, которые только ◊emph{выглядят} как~программа.

Если~бы у~Лиспа был другой синтаксис, то такая проблема~бы не~возникла.
К~примеру, изначально в~Лиспе планировались ◊nobr{M-выражения} ◊cite{mcc60} для записи действий над данными,
а~сами данные должно были записываться ◊nobr{S-выражениями}.
Это решило~бы проблему разделения кода и данных,
но сделало~бы невозможными вменяемые макросы — очень полезную вещь для расширения синтаксиса.
Как~бы то ни~было, ◊nobr{M-выражения} долго не~протянули ◊cite{mcc78a},
программы и данные стали записывать исключительно ◊nobr{S-выражениями}.
С~тех пор в~Лиспе есть специальная форма ◊ic{quote}, служащая для разделения кода и~данных.

Суть цитирования состоит в~том, что следующее за ключевым словом выражение возвращается «как~есть», без вычисления.
Это чётко видно в~следующем фрагменте~кода:

◊code:lisp{
... (case (car e)
      ((quote) (cadr e)) ... ) ...
}

◊indexR{цитаты!явные и неявные}
Интересный вопрос: а есть~ли разница между явным и неявным цитированием,
например, между ◊ic{33} и~◊ic{'33},
или между
◊footnote{Напомним: в~Scheme запись ◊ic{#(...)} означает процитированный вектор.}
◊ic{#(fa do~sol)} и~◊ic{'#(fa do~sol)}?
Если первое сравнение происходит между непосредственными значениями и тут вроде~бы всё очевидно,
то во~втором случае сравниваются составные объекты
(хоть для Лиспа они и являются формально «атомами» — не~списками).
Можно легко придумать несколько возможных трактовок данного выражения.
Цитирование возвращает аргумент как значение,
но сама запись ◊ic{#(fa do~sol)} могла~бы возвращать каждый раз новый вектор из трёх символов.
Другими словами, ◊ic{#(fa do~sol)} может быть просто сокращённой записью выражения ◊ic{(vector 'fa 'do~'sol)},
которое, конечно~же, будет означать совсем иное, нежели ◊ic{'#(fa do~sol)},
и~уж тем~более ◊ic{(vector fa do~sol)}.
Мы вернёмся к~этому вопросу позже
◊seePage{assignment/sect:quotation},
потому что, как видите, не~так просто определиться, какой именно смысл придавать цитированию.
